{
  "html": "<pre class=\"highlight\"><code><span class=\"nv\">pointListToLines</span><span class=\"p\">[</span><span class=\"nv\">pointList</span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"nv\">neighborhoodSize</span><span class=\"o\">_:</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> \n </span><span class=\"bp\">Module</span><span class=\"p\">[{</span><span class=\"nv\">L</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">DeleteDuplicates</span><span class=\"p\">[</span><span class=\"nv\">pointList</span><span class=\"p\">]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">NF</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">\\[Lambda]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">lineBag</span><span class=\"o\">,</span><span class=\"w\"> \n   </span><span class=\"nv\">counter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">seenQ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">sLB</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">nearest</span><span class=\"o\">,</span><span class=\"w\">  \n               </span><span class=\"nv\">nearest1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">nextPoint</span><span class=\"o\">,</span><span class=\"w\"> \n   </span><span class=\"nv\">couldReverseQ</span><span class=\"o\">,</span><span class=\"w\">  </span><span class=\"nv\">\\[ScriptD]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">\\[ScriptN]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">\\[ScriptS]</span><span class=\"p\">}</span><span class=\"o\">,</span><span class=\"w\">\n  </span><span class=\"nv\">NF</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Nearest</span><span class=\"p\">[</span><span class=\"nv\">L</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">;</span><span class=\"w\">\n       </span><span class=\"nv\">\\[Lambda]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Length</span><span class=\"p\">[</span><span class=\"nv\">L</span><span class=\"p\">]</span><span class=\"o\">;</span><span class=\"w\">\n  </span><span class=\"nb\">Monitor</span><span class=\"p\">[</span><span class=\"w\">\n   </span><span class=\"c\">(* list of segments *)</span><span class=\"w\">\n   </span><span class=\"nv\">lineBag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"o\">;</span><span class=\"w\">\n   </span><span class=\"nv\">counter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"o\">;</span><span class=\"w\"> \n   </span><span class=\"nb\">While</span><span class=\"p\">[</span><span class=\"nv\">counter</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">\\[Lambda]</span><span class=\"o\">,</span><span class=\"w\">\n    </span><span class=\"c\">(* new segment *)</span><span class=\"w\">\n    </span><span class=\"nv\">sLB</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nb\">RandomChoice</span><span class=\"p\">[</span><span class=\"nb\">DeleteCases</span><span class=\"p\">[</span><span class=\"nv\">L</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_?</span><span class=\"nv\">seenQ</span><span class=\"p\">]]}</span><span class=\"o\">;</span><span class=\"w\"> \n    </span><span class=\"nv\">seenQ</span><span class=\"p\">[</span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"m\">1</span><span class=\"p\">]]]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">True</span><span class=\"o\">;</span><span class=\"w\">\n    </span><span class=\"nv\">counter</span><span class=\"o\">++;</span><span class=\"w\">\n    </span><span class=\"nv\">couldReverseQ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">True</span><span class=\"o\">;</span><span class=\"w\">\n    </span><span class=\"c\">(* complete segment *)</span><span class=\"w\">\n    </span><span class=\"nb\">While</span><span class=\"p\">[(</span><span class=\"nv\">nearest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">NF</span><span class=\"p\">[</span><span class=\"nb\">Last</span><span class=\"p\">[</span><span class=\"nv\">sLB</span><span class=\"p\">]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nb\">Infinity</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">neighborhoodSize</span><span class=\"p\">}]</span><span class=\"o\">;</span><span class=\"w\">\n                 \n      </span><span class=\"nv\">nearest1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> \n       </span><span class=\"nb\">SortBy</span><span class=\"p\">[</span><span class=\"nb\">DeleteCases</span><span class=\"p\">[</span><span class=\"nv\">nearest</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_?</span><span class=\"nv\">seenQ</span><span class=\"p\">]</span><span class=\"o\">,</span><span class=\"w\"> \n        </span><span class=\"m\">1.</span><span class=\"w\"> </span><span class=\"nb\">EuclideanDistance</span><span class=\"p\">[</span><span class=\"nb\">Last</span><span class=\"p\">[</span><span class=\"nv\">sLB</span><span class=\"p\">]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nf\">#</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">]</span><span class=\"o\">;</span><span class=\"w\">\n                 </span><span class=\"nv\">nearest1</span><span class=\"w\"> </span><span class=\"o\">=!=</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nv\">couldReverseQ</span><span class=\"p\">)</span><span class=\"o\">,</span><span class=\"w\">\n                  </span><span class=\"nb\">If</span><span class=\"p\">[</span><span class=\"nv\">nearest1</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"o\">,</span><span class=\"w\">\n                   </span><span class=\"c\">(* extend the other end; penalize sharp edges *)</span><span class=\"w\">\n                   </span><span class=\"nv\">sLB</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Reverse</span><span class=\"p\">[</span><span class=\"nv\">sLB</span><span class=\"p\">]</span><span class=\"o\">;</span><span class=\"w\"> </span><span class=\"nv\">couldReverseQ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">False</span><span class=\"o\">,</span><span class=\"w\">\n                  </span><span class=\"c\">(* prefer straight continuation *)</span><span class=\"w\">\n                   </span><span class=\"nv\">nextPoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">If</span><span class=\"p\">[</span><span class=\"nb\">Length</span><span class=\"p\">[</span><span class=\"nv\">sLB</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">nearest1</span><span class=\"p\">[[</span><span class=\"m\">1</span><span class=\"p\">]]</span><span class=\"o\">,</span><span class=\"w\">\n                                                 </span><span class=\"nv\">\\[ScriptD]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> \n         </span><span class=\"m\">1.</span><span class=\"w\"> </span><span class=\"nb\">Normalize</span><span class=\"p\">[(</span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"m\">2</span><span class=\"p\">]])</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> \n            </span><span class=\"m\">1</span><span class=\"o\">/</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"m\">2</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"m\">3</span><span class=\"p\">]])]</span><span class=\"o\">;</span><span class=\"w\">\n                                                 </span><span class=\"nv\">\\[ScriptN]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"o\">,</span><span class=\"w\"> \n           </span><span class=\"m\">1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nb\">Reverse</span><span class=\"p\">[</span><span class=\"nv\">\\[ScriptD]</span><span class=\"p\">]</span><span class=\"o\">;</span><span class=\"w\">\n                                                </span><span class=\"nv\">\\[ScriptS]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> \n         </span><span class=\"nb\">Sort</span><span class=\"p\">[{</span><span class=\"nb\">Sqrt</span><span class=\"p\">[(</span><span class=\"nv\">\\[ScriptD]</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"nf\">#</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">]]))</span><span class=\"o\">^</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> \n                                                                      </span><span class=\"err\">\\</span><span class=\"w\">\n    </span><span class=\"c\">(* perpendicular *)</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">\\[ScriptN]</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"nf\">#</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nv\">sLB</span><span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">]]))</span><span class=\"o\">^</span><span class=\"m\">2</span><span class=\"p\">]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nf\">#</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">/@</span><span class=\"w\"> \n           </span><span class=\"nv\">nearest1</span><span class=\"p\">]</span><span class=\"o\">;</span><span class=\"w\"> \n                                                </span><span class=\"nv\">\\[ScriptS]</span><span class=\"p\">[[</span><span class=\"m\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">]]]</span><span class=\"o\">;</span><span class=\"w\">\n                   </span><span class=\"nb\">AppendTo</span><span class=\"p\">[</span><span class=\"nv\">sLB</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">nextPoint</span><span class=\"p\">]</span><span class=\"o\">;</span><span class=\"w\">\n                  </span><span class=\"nv\">seenQ</span><span class=\"p\">[</span><span class=\"nv\">nextPoint</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">True</span><span class=\"o\">;</span><span class=\"w\">\n                 </span><span class=\"nv\">counter</span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"p\">]]</span><span class=\"o\">;</span><span class=\"w\">\n    </span><span class=\"nb\">AppendTo</span><span class=\"p\">[</span><span class=\"nv\">lineBag</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nv\">sLB</span><span class=\"p\">]]</span><span class=\"o\">;</span><span class=\"w\">\n   </span><span class=\"c\">(* return segments sorted by length *)</span><span class=\"w\">\n   </span><span class=\"nb\">Reverse</span><span class=\"p\">[</span><span class=\"nb\">SortBy</span><span class=\"p\">[</span><span class=\"nb\">Select</span><span class=\"p\">[</span><span class=\"nv\">lineBag</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nb\">Length</span><span class=\"p\">[</span><span class=\"nf\">#</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"m\">12</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">]</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nb\">Length</span><span class=\"p\">]]</span><span class=\"o\">,</span><span class=\"w\">\n   </span><span class=\"c\">(* monitor progress *)</span><span class=\"w\">\n   </span><span class=\"nb\">Grid</span><span class=\"p\">[{{</span><span class=\"nb\">Text</span><span class=\"p\">[</span><span class=\"nb\">Style</span><span class=\"p\">[</span><span class=\"s\">\"progress point joining\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nb\">Darker</span><span class=\"p\">[</span><span class=\"nb\">Green</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"m\">0.66</span><span class=\"p\">]]]</span><span class=\"o\">,</span><span class=\"w\"> \n      </span><span class=\"nb\">ProgressIndicator</span><span class=\"p\">[</span><span class=\"nv\">counter</span><span class=\"o\">/</span><span class=\"nv\">\\[Lambda]</span><span class=\"p\">]}</span><span class=\"o\">,</span><span class=\"w\">\n               </span><span class=\"p\">{</span><span class=\"nb\">Text</span><span class=\"p\">[</span><span class=\"w\">\n       </span><span class=\"nb\">Style</span><span class=\"p\">[</span><span class=\"s\">\"number of segments\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nb\">Darker</span><span class=\"p\">[</span><span class=\"nb\">Green</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"m\">0.66</span><span class=\"p\">]]]</span><span class=\"o\">,</span><span class=\"w\">  \n      </span><span class=\"nb\">Length</span><span class=\"p\">[</span><span class=\"nv\">lineBag</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">}}</span><span class=\"o\">,</span><span class=\"w\"> \n            </span><span class=\"nb\">Alignment</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"nb\">Dividers</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Center</span><span class=\"p\">]]]</span><span class=\"w\">\n</span></code></pre>",
  "content": "pointListToLines[pointList_, neighborhoodSize_: 6] := \n Module[{L = DeleteDuplicates[pointList], NF, \\[Lambda], lineBag, \n   counter, seenQ, sLB, nearest,  \n               nearest1, nextPoint, \n   couldReverseQ,  \\[ScriptD], \\[ScriptN], \\[ScriptS]},\n  NF = Nearest[L] ;\n       \\[Lambda] = Length[L];\n  Monitor[\n   (* list of segments *)\n   lineBag = {};\n   counter = 0; \n   While[counter < \\[Lambda],\n    (* new segment *)\n    sLB = {RandomChoice[DeleteCases[L, _?seenQ]]}; \n    seenQ[sLB[[1]]] = True;\n    counter++;\n    couldReverseQ = True;\n    (* complete segment *)\n    While[(nearest = NF[Last[sLB], {Infinity, neighborhoodSize}];\n                 \n      nearest1 = \n       SortBy[DeleteCases[nearest, _?seenQ], \n        1. EuclideanDistance[Last[sLB], #] &];\n                 nearest1 =!= {} || couldReverseQ),\n                  If[nearest1 === {},\n                   (* extend the other end; penalize sharp edges *)\n                   sLB = Reverse[sLB]; couldReverseQ = False,\n                  (* prefer straight continuation *)\n                   nextPoint = If[Length[sLB] <= 3, nearest1[[1]],\n                                                 \\[ScriptD] = \n         1. Normalize[(sLB[[-1]] - sLB[[-2]]) + \n            1/2 (sLB[[-2]] - sLB[[-3]])];\n                                                 \\[ScriptN] = {-1, \n           1} Reverse[\\[ScriptD]];\n                                                \\[ScriptS] = \n         Sort[{Sqrt[(\\[ScriptD].(# - sLB[[-1]]))^2 + \n                                                                      \\\n    (* perpendicular *) 2 (\\[ScriptN].(# - sLB[[-1]]))^2], # } & /@ \n           nearest1]; \n                                                \\[ScriptS][[1, 2]]];\n                   AppendTo[sLB, nextPoint];\n                  seenQ[nextPoint] = True;\n                 counter++ ]];\n    AppendTo[lineBag, sLB]];\n   (* return segments sorted by length *)\n   Reverse[SortBy[Select[lineBag , Length[#] > 12 &], Length]],\n   (* monitor progress *)\n   Grid[{{Text[Style[\"progress point joining\", Darker[Green, 0.66]]], \n      ProgressIndicator[counter/\\[Lambda]]},\n               {Text[\n       Style[\"number of segments\", Darker[Green, 0.66]]],  \n      Length[lineBag] + 1}}, \n            Alignment -> Left, Dividers -> Center]]]\n",
  "headings": [
    "寻找组成轮廓的曲线"
  ],
  "anchor": "寻找组成轮廓的曲线",
  "custom_ranking": {
    "position": 14,
    "heading": 80
  },
  "hidden": true,
  "title": "《啥是佩奇》之 Mathematica 版",
  "category": "CodePlay",
  "note": "此文档为旧博客搬运。——2020.05.11",
  "toc": true,
  "tags": [
    "Mathematica"
  ],
  "categories": [
    "CodePlay"
  ],
  "date": 1548360360,
  "slug": "peppa-pig-mathematica",
  "type": "post",
  "url": "/2019/01/24/peppa-pig-mathematica.html"
}